import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../models/peer_job.dart';
import '../../services/database_service.dart';
import '../../services/supabase_service.dart';

class CreatePeerJobPostScreen extends StatefulWidget {
  const CreatePeerJobPostScreen({Key? key}) : super(key: key);

  @override
  State<CreatePeerJobPostScreen> createState() => _CreatePeerJobPostScreenState();
}

class _CreatePeerJobPostScreenState extends State<CreatePeerJobPostScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _locationController = TextEditingController();
  final _rateController = TextEditingController();
  final _timeframeController = TextEditingController();
  final _skillsController = TextEditingController();
  
  final DatabaseService _databaseService = DatabaseService();
  final SupabaseService _supabaseService = SupabaseService();
  
  bool _isRemote = false;
  String _currency = 'USD';
  String _rateType = 'hourly'; // hourly, fixed, per_session
  bool _isLoading = false;
  List<String> _selectedSkills = [];
  
  final List<String> _availableCurrencies = ['USD', 'EUR', 'GBP', 'CAD', 'AUD'];
  final List<String> _availableRateTypes = ['hourly', 'fixed', 'per session'];
  final List<String> _availableTimeframes = ['1 hour', '2 hours', 'Half day', 'Full day', 'Custom'];
  
  // Popular skills for auto-suggestion
  final List<String> _suggestedSkills = [
    'Teaching', 'Tutoring', 'Academic Writing', 'Mathematics',
    'Programming', 'Web Development', 'Language', 'Dance',
    'Music', 'Piano', 'Guitar', 'Tennis', 'Basketball',
    'Fitness', 'Yoga', 'Photography', 'Art', 'Design',
    'Cooking', 'Resume Writing', 'Interview Preparation', 'Career Coaching'
  ];

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _locationController.dispose();
    _rateController.dispose();
    _timeframeController.dispose();
    _skillsController.dispose();
    super.dispose();
  }

  // Dev mode for testing without authentication
  final bool _devMode = true;

  Future<void> _submitPost() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });
      
      try {
        // Check if user is authenticated
        if (!_supabaseService.isAuthenticated && !_devMode) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('You must be logged in to post a service')),
          );
          setState(() {
            _isLoading = false;
          });
          return;
        }
        
        // Get current user ID
        final userId = _supabaseService.currentUserId ?? "dev-user-id";
        
        // Create new peer job
        final peerJob = PeerJob(
          id: '', // Will be generated by Supabase
          title: _titleController.text,
          description: _descriptionController.text,
          userId: userId,
          skills: _selectedSkills,
          location: _isRemote ? 'Remote' : _locationController.text,
          budget: double.parse(_rateController.text), // Using budget field to store rate
          currency: _currency,
          timeframe: _timeframeController.text,
          postedDate: DateTime.now(),
          status: 'open',
          isRemote: _isRemote,
        );
        
        // Save to database
        final createdJob = await _databaseService.createPeerJob(peerJob);
        
        if (createdJob != null || _devMode) {
          if (!mounted) return;
          
          // Show success message and close the screen
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Service posted successfully')),
          );
          
          Navigator.pop(context, true); // Return true to indicate success
        } else {
          if (!mounted) return;
          
          // Show error message
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Failed to post service. Please try again.')),
          );
        }
      } catch (e) {
        print('Error creating service: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: ${e.toString()}')),
        );
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }

  void _addSkill(String skill) {
    if (skill.isNotEmpty && !_selectedSkills.contains(skill)) {
      setState(() {
        _selectedSkills.add(skill);
        _skillsController.clear();
      });
    }
  }

  void _removeSkill(String skill) {
    setState(() {
      _selectedSkills.remove(skill);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        title: const Text(
          "Create Service Listing",
          style: TextStyle(
            color: Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
        leading: IconButton(
          icon: const Icon(Icons.close, color: Colors.black),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          TextButton(
            onPressed: _isLoading ? null : _submitPost,
            child: _isLoading
                ? const SizedBox(
                    width: 16,
                    height: 16,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF4ECDC4)),
                    ),
                  )
                : const Text(
                    "Post",
                    style: TextStyle(
                      color: Color(0xFF4ECDC4),
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
          ),
        ],
      ),
      body: GestureDetector(
        onTap: () => FocusScope.of(context).unfocus(),
        child: Form(
          key: _formKey,
          child: ListView(
            padding: const EdgeInsets.all(16),
            children: [
              // Service Title
              _buildSectionTitle("Service Title"),
              TextFormField(
                controller: _titleController,
                decoration: _inputDecoration(
                  hintText: "E.g., Math Tutoring, Guitar Lessons, Fitness Training...",
                  prefixIcon: Icons.work_outline,
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a service title';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),
              
              // Description
              _buildSectionTitle("Description"),
              TextFormField(
                controller: _descriptionController,
                decoration: _inputDecoration(
                  hintText: "Describe your service, experience, teaching methods...",
                  contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                ),
                maxLines: 5,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),
              
              // Skills
              _buildSectionTitle("Skills & Expertise"),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Selected skills chips
                  Wrap(
                    spacing: 8,
                    runSpacing: 8,
                    children: _selectedSkills.map((skill) => Chip(
                      label: Text(skill),
                      deleteIcon: const Icon(Icons.close, size: 16),
                      onDeleted: () => _removeSkill(skill),
                      backgroundColor: const Color(0xFF4ECDC4).withOpacity(0.1),
                      labelStyle: const TextStyle(
                        color: Color(0xFF4ECDC4),
                      ),
                    )).toList(),
                  ),
                  const SizedBox(height: 8),
                  
                  // Skills input
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: TextFormField(
                          controller: _skillsController,
                          decoration: _inputDecoration(
                            hintText: "Add skills...",
                            prefixIcon: Icons.psychology,
                          ),
                          onFieldSubmitted: (value) {
                            _addSkill(value);
                          },
                        ),
                      ),
                      const SizedBox(width: 8),
                      ElevatedButton(
                        onPressed: () {
                          _addSkill(_skillsController.text);
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF4ECDC4),
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                        child: const Text("Add"),
                      ),
                    ],
                  ),
                  
                  // Suggested skills
                  const SizedBox(height: 8),
                  SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      children: _suggestedSkills.map((skill) => Padding(
                        padding: const EdgeInsets.only(right: 8),
                        child: ActionChip(
                          label: Text(skill),
                          onPressed: () => _addSkill(skill),
                          backgroundColor: Colors.grey[100],
                        ),
                      )).toList(),
                    ),
                  ),
                  
                  if (_selectedSkills.isEmpty)
                    Padding(
                      padding: const EdgeInsets.only(top: 8),
                      child: Text(
                        "Please add at least one skill",
                        style: TextStyle(
                          color: Colors.red[400],
                          fontSize: 12,
                        ),
                      ),
                    ),
                ],
              ),
              const SizedBox(height: 20),
              
              // Location
              _buildSectionTitle("Location"),
              Row(
                children: [
                  Checkbox(
                    value: _isRemote,
                    onChanged: (value) {
                      setState(() {
                        _isRemote = value ?? false;
                      });
                    },
                    activeColor: const Color(0xFF4ECDC4),
                  ),
                  const Text("This is an online/remote service"),
                ],
              ),
              if (!_isRemote)
                TextFormField(
                  controller: _locationController,
                  decoration: _inputDecoration(
                    hintText: "E.g., University Campus, My Studio, Client's home",
                    prefixIcon: Icons.location_on_outlined,
                  ),
                  validator: (value) {
                    if (!_isRemote && (value == null || value.isEmpty)) {
                      return 'Please enter a location';
                    }
                    return null;
                  },
                ),
              const SizedBox(height: 20),
              
              // Your Rate
              _buildSectionTitle("Your Rate"),
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Currency dropdown
                  Container(
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey[300]!),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: _currency,
                        onChanged: (String? newValue) {
                          setState(() {
                            _currency = newValue!;
                          });
                        },
                        items: _availableCurrencies.map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: Text(value),
                            ),
                          );
                        }).toList(),
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  
                  // Rate amount
                  Expanded(
                    child: TextFormField(
                      controller: _rateController,
                      decoration: _inputDecoration(
                        hintText: "Enter your rate",
                        prefixIcon: Icons.attach_money,
                      ),
                      keyboardType: TextInputType.number,
                      inputFormatters: [
                        FilteringTextInputFormatter.digitsOnly,
                      ],
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter your rate';
                        }
                        if (double.tryParse(value) == null) {
                          return 'Please enter a valid number';
                        }
                        return null;
                      },
                    ),
                  ),
                  
                  // Rate type
                  const SizedBox(width: 8),
                  Container(
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey[300]!),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: _rateType,
                        onChanged: (String? newValue) {
                          setState(() {
                            _rateType = newValue!;
                          });
                        },
                        items: _availableRateTypes.map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem<String>(
                            value: value,
                            child: Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: Text(value),
                            ),
                          );
                        }).toList(),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              // Explanation of rate
              Text(
                _rateType == 'hourly' 
                    ? "Clients will be charged this rate per hour" 
                    : _rateType == 'fixed' 
                        ? "Clients will be charged this fixed rate for the entire service" 
                        : "Clients will be charged this rate per session",
                style: TextStyle(
                  fontSize: 12,
                  fontStyle: FontStyle.italic,
                  color: Colors.grey[600],
                ),
              ),
              const SizedBox(height: 20),
              
              // Timeframe
              _buildSectionTitle("Service Duration"),
              DropdownButtonFormField<String>(
                decoration: _inputDecoration(
                  hintText: "Select typical duration",
                  prefixIcon: Icons.timer_outlined,
                ),
                value: _timeframeController.text.isEmpty ? null : _timeframeController.text,
                items: _availableTimeframes.map((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    _timeframeController.text = newValue!;
                  });
                },
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a duration';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 40),
              
              // Submit button
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _submitPost,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF4ECDC4),
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: _isLoading
                      ? const SizedBox(
                          width: 24,
                          height: 24,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        )
                      : const Text(
                          "Post Service",
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                ),
              ),
              const SizedBox(height: 40),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Text(
        title,
        style: const TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  InputDecoration _inputDecoration({
    required String hintText,
    IconData? prefixIcon,
    EdgeInsetsGeometry? contentPadding,
  }) {
    return InputDecoration(
      hintText: hintText,
      prefixIcon: prefixIcon != null ? Icon(prefixIcon, color: Colors.grey) : null,
      filled: true,
      fillColor: Colors.grey[100],
      contentPadding: contentPadding ?? const EdgeInsets.symmetric(horizontal: 16),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(8),
        borderSide: BorderSide.none,
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(8),
        borderSide: const BorderSide(color: Color(0xFF4ECDC4)),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(8),
        borderSide: BorderSide(color: Colors.red[400]!),
      ),
    );
  }
}